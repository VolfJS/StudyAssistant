// require("dotenv").config();

const { Composer } = require('grammy');

// const axios = require("axios");
// const https = require("https");

// const { Users, Projects } = require("../db/connect");
// const chatLog = require("./functions/admin_logs");
// const createKeyboardFromDatabase = require("./functions/select_projects");
// const {
//   BACK_MENU,
//   MAIN_MENU,
//   SEND_SMS,
//   BACK_MENU_OR_REPLENISH,
//   RENT_MENU_KEYB,
//   BACK_RENT_MENU,
//   RENT_EU_KEYB,
//   RENT_SNG_KEYB,
//   ENTER_PROJECT,
// } = require("../locales_keyboards");
// const {
//   GetProfileInfo,
//   TARIFFS_INFO,
//   API_INFO,
//   MENU_INFO,
//   INFO_SUPPORT,
//   RENT_MENU,
//   MY_PROJECTS_TEXT,
//   RENT_EU,
//   RENT_SNG,
// } = require("./locale_texts");

// const {
//   ANTIK_EU_DESC,
//   ANTIK_KZ_DESC,
//   ADS_EU_DESC,
//   ANTIK_RU_DESC,
//   ANTIK_UA_DESC,

//   ANTIK_KZ_LINK,
//   ANTIK_UA_LINK,
//   ANTIK_RU_LINK,
//   ANTIK_EU_LINK,
//   ADS_EU_LINK,
// } = require("./projects");

// async function callback(ctx) {
//   if (ctx.callbackQuery.data) {
//     console.log(ctx.callbackQuery.data);
//     let user = await Users.findOne({ where: { tgId: ctx.from.id } });
//     if (ctx.callbackQuery.data == "menu") {
//       await ctx.editMessageText(MENU_INFO, {
//         parse_mode: "HTML",
//         disable_web_page_preview: true,
//         reply_markup: MAIN_MENU,
//       });
//     } else if (ctx.callbackQuery.data == "rent_menu") {
//       await ctx.editMessageText(RENT_MENU, {
//         parse_mode: "HTML",
//         disable_web_page_preview: true,
//         reply_markup: RENT_MENU_KEYB,
//       });
//     } else if (ctx.callbackQuery.data == "eu") {
//       await ctx.editMessageText(RENT_EU, {
//         parse_mode: "HTML",
//         reply_markup: RENT_EU_KEYB,
//       });
//     } else if (ctx.callbackQuery.data == "ru_antikino") {
//       await ctx.editMessageText(ANTIK_RU_DESC, {
//         reply_markup: ENTER_PROJECT(ANTIK_RU_LINK, "ru_antikino"),
//         parse_mode: "HTML",
//       });
//     } else if (ctx.callbackQuery.data == "kz_antikino") {
//       await ctx.editMessageText(ANTIK_KZ_DESC, {
//         reply_markup: ENTER_PROJECT(ANTIK_KZ_LINK, "kz_antikino"),
//         parse_mode: "HTML",
//       });
//     } else if (ctx.callbackQuery.data == "rent_eu_req") {
//       let user = await Users.findOne({ where: { tgId: ctx.from.id } });
//       if (user.req_proj)
//         return ctx.editMessageText(
//           `‚ùå <b>–í—ã —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ –∑–∞—è–≤–∫—É, –æ–∂–∏–¥–∞–π—Ç–µ.</b>`,
//           {
//             parse_mode: "HTML",
//           }
//         );
//       return ctx.scenes.enter("rentEuReq");
//     } else if (ctx.callbackQuery.data == "ua_antikino") {
//       await ctx.editMessageText(ANTIK_UA_DESC, {
//         reply_markup: ENTER_PROJECT(ANTIK_UA_LINK, "ua_antikino"),
//         parse_mode: "HTML",
//       });
//     } else if (ctx.callbackQuery.data == "eu_ads") {
//       await ctx.editMessageText(ADS_EU_DESC, {
//         reply_markup: ENTER_PROJECT(ADS_EU_LINK, "eu_ads"),
//         parse_mode: "HTML",
//       });
//     } else if (ctx.callbackQuery.data == "eu_antikino") {
//       await ctx.editMessageText(ANTIK_EU_DESC, {
//         reply_markup: ENTER_PROJECT(ANTIK_EU_LINK, "eu_ads"),
//         parse_mode: "HTML",
//       });
//     } else if (ctx.callbackQuery.data == "sng") {
//       await ctx.editMessageText(RENT_SNG, {
//         parse_mode: "HTML",
//         reply_markup: RENT_SNG_KEYB,
//       });
//     } else if (ctx.callbackQuery.data == "my_projects") {
//       let projects = await Projects.findAll({
//         where: { tgId_creator: ctx.from.id },
//       });
//       console.log(projects);
//       if (!projects.length) {
//         return ctx.editMessageText(
//           `<b>‚ùå –£ –≤–∞—Å –µ—â—ë –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤</b>`,
//           {
//             parse_mode: "HTML",
//             reply_markup: BACK_MENU,
//           }
//         );
//       }
//       let keyboard_projects = await createKeyboardFromDatabase(ctx);
//       await ctx.editMessageText(MY_PROJECTS_TEXT, {
//         parse_mode: "HTML",
//         reply_markup: keyboard_projects,
//       });
//     } else if (ctx.callbackQuery.data == "disable_logs_api") {
//       await Users.update(
//         { api_log_status: false },
//         { where: { tgId: ctx.from.id } }
//       );
//       await ctx.editMessageText(`<b>‚òëÔ∏è –í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫–ª—é—á–∏–ª–∏ –ª–æ–≥–∏ –ø–æ API.</b>`, {
//         parse_mode: "HTML",
//         reply_markup: BACK_MENU,
//       });
//     } else if (ctx.callbackQuery.data == "profile") {
//       await ctx.editMessageText(GetProfileInfo(user), {
//         parse_mode: "HTML",
//         reply_markup: BACK_MENU_OR_REPLENISH,
//       });
//     } else if (ctx.callbackQuery.data == "support") {
//       await ctx.editMessageText(INFO_SUPPORT, {
//         parse_mode: "HTML",
//         reply_markup: BACK_MENU,
//       });
//     } else if (ctx.callbackQuery.data == "agreement") {
//       await ctx.editMessageText(
//         `<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ –°–æ–≥–ª–∞—à–µ–Ω–∏–µ</b>
// –ò—Å–ø–æ–ª—å–∑—É—è –±–æ—Ç–∞, –í—ã —Å–æ–≥–ª–∞—à–∞–µ—Ç–µ—Å—å —Å —É—Å–ª–æ–≤–∏—è–º–∏ –¥–∞–Ω–Ω–æ–≥–æ —Å–æ–≥–ª–∞—à–µ–Ω–∏—è.

// –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–±—è–∑—É–µ—Ç—Å—è:
// - –Ω–µ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å –≤ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å–≤–æ—é —É—á–µ—Ç–Ω—É—é –∑–∞–ø–∏—Å—å –∏/–∏–ª–∏ –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å —Å–≤–æ–µ–π —É—á–µ—Ç–Ω–æ–π –∑–∞–ø–∏—Å–∏ —Ç—Ä–µ—Ç—å–∏–º –ª–∏—Ü–∞–º
// - –Ω–µ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å —É—á–µ—Ç–Ω—É—é –∑–∞–ø–∏—Å—å –æ—Ç –∏–º–µ–Ω–∏ –∏–ª–∏ –≤–º–µ—Å—Ç–æ –¥—Ä—É–≥–æ–≥–æ –ª–∏—Ü–∞ –∑–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ–º —Å–ª—É—á–∞–µ–≤, –ø—Ä–µ–¥—É—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã—Ö –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–æ–º –†–§
// - –Ω–µ —Ä–∞–∑–º–µ—â–∞—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã —Ä–µ–∫–ª–∞–º–Ω–æ–≥–æ, —ç—Ä–æ—Ç–∏—á–µ—Å–∫–æ–≥–æ, –ø–æ—Ä–Ω–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–≥–æ –∏–ª–∏ –æ—Å–∫–æ—Ä–±–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞, –∞ —Ç–∞–∫–∂–µ –∏–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ –∫–æ—Ç–æ—Ä–æ–π –∑–∞–ø—Ä–µ—â–µ–Ω–æ –∏–ª–∏ –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏—Ç –Ω–æ—Ä–º–∞–º –¥–µ–π—Å—Ç–≤—É—é—â–µ–≥–æ –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–∞ –†–§

// –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è –∏–º–µ–µ—Ç –ø—Ä–∞–≤–æ:
// - –±–µ–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–æ–∑–¥–∞–≤–∞—Ç—å, –∏–∑–º–µ–Ω—è—Ç—å –∏ –æ—Ç–º–µ–Ω—è—Ç—å –ø—Ä–∞–≤–∏–ª–∞
// - –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞—Ç—å –¥–æ—Å—Ç—É–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –±–µ–∑ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è –ø—Ä–∏—á–∏–Ω
// - –æ—Ç–∫–∞–∑—ã–≤–∞—Ç—å –≤ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–µ –±–µ–∑ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è –ø—Ä–∏—á–∏–Ω
// - –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –≤—Å—é –¥–æ—Å—Ç—É–ø–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ —É–ø–æ–ª–Ω–æ–º–æ—á–µ–Ω–Ω—ã–º –Ω–∞ —Ç–æ –æ—Ä–≥–∞–Ω–∞–º –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω–æ–π –≤–ª–∞—Å—Ç–∏ –≤ —Å–ª—É—á–∞—è—Ö, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –∑–∞–∫–æ–Ω–æ–º

// –î–∞–Ω–Ω–æ–µ –°–æ–≥–ª–∞—à–µ–Ω–∏–µ –≤—Å—Ç—É–ø–∞–µ—Ç –≤ —Å–∏–ª—É –ø—Ä–∏ –ª—é–±–æ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –¥–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞.
// –°–æ–≥–ª–∞—à–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤—É–µ—Ç –±–µ—Å—Å—Ä–æ—á–Ω–æ.
// –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Å—Ç–∞–≤–ª—è–µ—Ç –∑–∞ —Å–æ–±–æ–π –ø—Ä–∞–≤–æ –≤ –æ–¥–Ω–æ—Å—Ç–æ—Ä–æ–Ω–Ω–µ–º –ø–æ—Ä—è–¥–∫–µ –∏–∑–º–µ–Ω—è—Ç—å –¥–∞–Ω–Ω–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ –ø–æ —Å–≤–æ–µ–º—É —É—Å–º–æ—Ç—Ä–µ–Ω–∏—é.
// –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–µ –æ–ø–æ–≤–µ—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –≤ –°–æ–≥–ª–∞—à–µ–Ω–∏–∏.`,
//         {
//           parse_mode: "HTML",
//           reply_markup: BACK_MENU,
//         }
//       );
//     } else if (ctx.callbackQuery.data == "send_sms_start_scene") {
//       return ctx.scenes.enter("sendSmsScene");
//     } else if (ctx.callbackQuery.data.indexOf("send_sms") != -1) {
//       await ctx.answerCallbackQuery("‚è≥ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ...");
//       let id_sms = ctx.callbackQuery.data.replace("send_sms", "");

//       let sms_info = await Sms.findOne({ where: { id: id_sms } });

//       const agent = new https.Agent({
//         rejectUnauthorized: false,
//       });

//       axios({
//         method: "post",
//         url: "https://api.eu-provide.com",
//         httpsAgent: agent,
//         data: {
//           sender: sms_info.name_sender,
//           phone: sms_info.phone_sender,
//           text: sms_info.text_sender,
//           key: process.env.API_TOKEN,
//         },
//       })
//         .then(async (res) => {
//           if (res.data.encoding == "GSM_7BIT") {
//             await ctx.editMessageText(
//               `<b>‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ —É—Å–ø–µ—à–Ω–æ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –Ω–∞ –Ω–æ–º–µ—Ä</b> <code>${sms_info.phone_sender}</code>`,
//               {
//                 parse_mode: "HTML",
//                 reply_markup: MAIN_MENU,
//               }
//             );

//             let user = await Users.findOne({ where: { tgId: ctx.from.id } });

//             user.balance -= sms_info.price;
//             await user.save();

//             user.sms += 1;
//             await user.save();

//             sms_info.status = "success";
//             await sms_info.save();

//             console.log(`—Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ`);
//             return;
//           } else {
//             await ctx.editMessageText(
//               `<b>üÜò –í–æ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–æ–∏–∑–æ—à–ª–∞ —Å–ª–µ–¥—É—é—â–∞—è –æ—à–∏–±–∫–∞:\n<code>${res.data}</code></b>`,
//               {
//                 parse_mode: "HTML",
//                 reply_markup: MAIN_MENU,
//               }
//             );
//           }
//         })
//         .catch((err) => console.log(err));
//     } else if (ctx.callbackQuery.data == "replenish") {
//       return ctx.scenes.enter("depositeBalance");
//     } else if (ctx.callbackQuery.data.indexOf("check_payment") != -1) {
//       await ctx.answerCallbackQuery("‚è≥ –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–ø–ª–∞—Ç—É...");
//       try {
//         let id_payment = ctx.callbackQuery.data.replace("check_payment ", "");
//         console.log("id_payment:", id_payment);
//         const agent = new https.Agent({
//           rejectUnauthorized: false,
//         });

//         let res = await axios({
//           method: "post",
//           url: "https://api.crystalpay.io/v2/invoice/info/",
//           httpsAgent: agent,
//           data: {
//             auth_login: "sms",
//             auth_secret: "d71d028957dee7c503de1b8564d10d5873876b19",
//             id: id_payment,
//           },
//         });
//         // const res = await axios.get(
//         //   `https://api.crystalpay.ru/v1/?s=d71d028957dee7c503de1b8564d10d5873876b19&n=Sms&o=invoice-check&i=${id_payment}`,
//         // );

//         console.log(res.data);

//         if (res.data.state == "payed") {
//           let user = await Users.findOne({ where: { tgId: ctx.from.id } });
//           chatLog(
//             `<a href="tg://user?id=${ctx.from.id}">–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</a> –ø–æ–ø–æ–ª–Ω–∏–ª —Å–≤–æ–π –±–∞–ª–∞–Ω—Å –Ω–∞ —Å—É–º–º—É <code>${res.data.amount}$</code>`
//           );
//           await ctx.editMessageText(
//             `‚úÖ –ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –≤–∞—Å –∑–∞ –æ–ø–ª–∞—Ç—É.\n<b>üí∏ –ù–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å –∑–∞—á–∏—Å–ª–µ–Ω–æ <code>${res.data.amount}</code> RUB</b>`,
//             {
//               parse_mode: "HTML",
//               reply_markup: BACK_MENU,
//             }
//           );

//           user.balance += res.data.amount;

//           await user.save();

//           return;
//         } else {
//           return ctx.reply(`–û–ø–ª–∞—Ç–∞ –Ω–µ –±—ã–ª–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞.`);
//         }
//       } catch (e) {
//         console.log(e);
//       }
//     }
//   }
// }

// module.exports = callback;

const callbackComposer = new Composer();

callbackComposer.callbackQuery('raspisanie', ctx => {
  ctx.answerCallbackQuery('–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ');
});

callbackComposer.callbackQuery('time_work', ctx => {
  ctx.answerCallbackQuery('–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã');
});

callbackComposer.callbackQuery('materials', ctx => {
  ctx.answerCallbackQuery('–ú–∞—Ç–µ—Ä–∏–∞–ª—ã');
});

callbackComposer.callbackQuery('study_plan', ctx => {
  ctx.answerCallbackQuery('—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ');
});

callbackComposer.callbackQuery('documents', ctx => {
  ctx.answerCallbackQuery('–î–æ–∫—É–º–µ–Ω—Ç—ã');
});

module.exports = {
  callbackComposer,
};
