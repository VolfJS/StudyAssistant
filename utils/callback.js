require("dotenv").config();

const { Composer } = require('grammy');
const config = require('../config');
const prisma = require('../db/prisma');
const { MAIN_MENU, TIME_WORK_KEYB, DOCUMENTS_LIST, GROUPS_LIST, BACK_MENU, SORT_RASPISANIE, ACCEPT_OR_CANCEL, STUDENT_OR_TEACHER, ENTER_GROUPS_LIST } = require('../locales_keyboards');

const generateKeyboard = require('./keyboardConstructor')

const callbackComposer = new Composer();

callbackComposer.callbackQuery('registration_first', async ctx => {

  await ctx.editMessageText(
    `<b>‚ùî –í—ã –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –∏–ª–∏ —Å—Ç—É–¥–µ–Ω—Ç? (–æ—Ç–≤–µ—á–∞–π—Ç–µ —á–µ—Å—Ç–Ω–æ)</b>`,
    {
      parse_mode: 'HTML',
      reply_markup: STUDENT_OR_TEACHER(ctx.from.id),
    },
  );
});

callbackComposer.callbackQuery('reg_student', async ctx => {
  await ctx.editMessageText(
    `<b>‚¨áÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É –≥—Ä—É–ø–ø—É:</b>`,
    {
      parse_mode: 'HTML',
      reply_markup: ENTER_GROUPS_LIST,
    },
  );
});

callbackComposer.callbackQuery(/enter_group_(\w+)/, async ctx => {
  const isAdmin = config.ownerIds.includes(ctx.msg.from.id) || false;
  const uid = BigInt(ctx.from.id);

  await prisma.user.upsert({
    where: { uid },
    create: {
      uid,
      name: ctx.from.first_name,
      username: ctx.from.username,
      isAdmin: isAdmin,
      group: ctx.match[1]
    },
    update: {},
  });

  await ctx.editMessageText(
    `<b>üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ StudyAssistant Bot!</b>\n<b>üëá –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –≤–∞–º —Ä–∞–∑–¥–µ–ª –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ</b>`,
    {
      parse_mode: 'HTML',
      reply_markup: MAIN_MENU,
    },
  );
});

callbackComposer.callbackQuery(/reg_teacher_(\w+)/, async (ctx) => {
  const telegram_id = ctx.match[1]
  const uid = BigInt(ctx.from.id);
  const isAdmin = config.ownerIds.includes(ctx.from.id) || false;
  await prisma.user.upsert({
    where: { uid },
    create: {
      uid,
      name: ctx.from.first_name,
      username: ctx.from.username,
      isAdmin: isAdmin,
    },
    update: {},
  });
  ctx.api.sendMessage(process.env.ADMINS_CHAT, `‚ùóÔ∏è –í–æ–∑–º–æ–∂–Ω—ã–π —É—á–∏—Ç–µ–ª—å - <a href="tg://user?id=${telegram_id}">–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</a>`, {
    parse_mode: "HTML",
    reply_markup: ACCEPT_OR_CANCEL(telegram_id)
  })

  return ctx.editMessageText(`<b>‚è≥ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ —Å—Ç–∞—Ç—É—Å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –±—ã–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞. –û–∂–∏–¥–∞–π—Ç–µ.</b>`, {
    parse_mode: "HTML"
  })
})

callbackComposer.callbackQuery(/accept_teacher_(\w+)/, async (ctx) => {
  const telegram_id = ctx.match[1]
  await prisma.user.update({
    where: { uid: telegram_id },
    data: { type: 'Teacher' },
  })

  ctx.api.sendMessage(telegram_id, `<b>‚úÖ –í–∞—à —Å—Ç–∞—Ç—É—Å –±—ã–ª –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ "–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å"!</b>`, {
    parse_mode: "HTML",
    reply_markup: BACK_MENU
  })

  return ctx.editMessageText(`<b>‚úÖ –°—Ç–∞—Ç—É—Å <a href="tg://user?id=${telegram_id}">–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</a> –∏–∑–º–µ–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ.</b>`, {
    parse_mode: "HTML"
  })
})

callbackComposer.callbackQuery(/decline_teacher_(\w+)/, async (ctx) => {
  const telegram_id = ctx.match[1]
  ctx.api.sendMessage(telegram_id, `<b>‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ —Å–º–µ–Ω—É —Å—Ç–∞—Ç—É—Å–∞ –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.</b>`, {
    parse_mode: "HTML",
    reply_markup: BACK_MENU
  })

  return ctx.editMessageText(`<b>‚úÖ –°—Ç–∞—Ç—É—Å <a href="tg://user?id=${telegram_id}">–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</a> –∏–∑–º–µ–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ.</b>`, {
    parse_mode: "HTML"
  })
})

callbackComposer.callbackQuery('menu', ctx => {
  return ctx.editMessageText(
    `<b>üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ StudyAssistant Bot!</b>\n<b>üëá –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –≤–∞–º —Ä–∞–∑–¥–µ–ª –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ</b>`,
    {
      parse_mode: 'HTML',
      reply_markup: MAIN_MENU,
    },
  );
});

callbackComposer.callbackQuery('raspisanie', async ctx => {
  return ctx.editMessageText(`<b>–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É:</b>`, {
    parse_mode: "HTML",
    reply_markup: GROUPS_LIST
  })
});

// callbackComposer.callbackQuery('raspisanie', async ctx => {
//   let teachers = await prisma.teacher.findMany()
//   let keyb = await generateKeyboard(teachers, 1, `enter_teacher`)
//   console.log(keyb)
//   return ctx.editMessageText(`<b>–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è:</b>`, {
//     parse_mode: "HTML",
//     reply_markup: keyb
//   })
// });

callbackComposer.callbackQuery('time_work', ctx => {
  return ctx.editMessageText('<b>–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–µ–µ –æ—Ç–¥–µ–ª–µ–Ω–∏–µ:</b>', {
    parse_mode: "HTML",
    reply_markup: TIME_WORK_KEYB
  });
});

callbackComposer.callbackQuery('time_buchgalteriya', ctx => {
  return ctx.editMessageText('üï∞ <b>–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –±—É—Ö–≥–∞–ª—Ç–µ—Ä–∏–∏: <code>8:00 - 15:00</code></b>', {
    parse_mode: "HTML",
    reply_markup: BACK_MENU
  });
});

callbackComposer.callbackQuery('time_kafedra', ctx => {
  return ctx.editMessageText('üï∞ <b>–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –∫–∞—Ñ–µ–¥—Ä—ã: <code>9:30 - 16:30</code></b>', {
    parse_mode: "HTML",
    reply_markup: BACK_MENU
  });
});

callbackComposer.callbackQuery('time_medpunkt', ctx => {
  return ctx.editMessageText('üï∞ <b>–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –º–µ–¥–ø—É–Ω–∫—Ç–∞: <code>7:30 - 18:00</code></b>', {
    parse_mode: "HTML",
    reply_markup: BACK_MENU
  });
});

callbackComposer.callbackQuery('materials', ctx => {
  return ctx.editMessageText('<b>–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É –≥—Ä—É–ø–ø—É:</b>', {
    parse_mode: "HTML",
    reply_markup: GROUPS_LIST
  });
});

callbackComposer.callbackQuery('study_plan', ctx => {
  // ctx.answerCallbackQuery('<b>–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É –≥—Ä—É–ø–ø—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —É—á–µ–±–Ω–æ–≥–æ –ø–ª–∞–Ω–∞:</b>');
  return ctx.editMessageText('<b>–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É –≥—Ä—É–ø–ø—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —É—á–µ–±–Ω–æ–≥–æ –ø–ª–∞–Ω–∞:</b>', {
    parse_mode: "HTML",
    reply_markup: GROUPS_LIST
  });
});

callbackComposer.callbackQuery('documents', async ctx => {
  return ctx.editMessageText('<b>–í—ã–±–µ—Ä–∏—Ç–µ –∂–µ–ª–∞–µ–º—ã–π –≤–∏–¥ –∑–∞—è–≤–ª–µ–Ω–∏—è –∏–ª–∏ –ø–æ—è—Å–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∑–∞–ø–∏—Å–∫–∏:</b>', {
    parse_mode: "HTML",
    reply_markup: DOCUMENTS_LIST
  });
});

module.exports = {
  callbackComposer,
};
